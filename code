import os

from pymongo import MongoClient

from dotenv import load_dotenv

from langchain_openai import AzureOpenAIEmbeddings

# Load environment variables

load_dotenv()

# Azure OpenAI configuration

openai_api_type = "azure"

azure_endpoint = "https://jnj-ls-rg.openai.azure.com/" # Use 'azure_endpoint' instead

openai_api_version = "2023-09-15-preview"

openai_api_key = "abc7a61ffc8748e885768d47d6221efe" # Replace with your actual key

deployment_name = "chatembed"

# Set environment variables

os.environ["OPENAI_API_TYPE"] = openai_api_type

os.environ["OPENAI_API_VERSION"] = openai_api_version

os.environ["AZURE_OPENAI_ENDPOINT"] = azure_endpoint # Updated environment variable

os.environ["OPENAI_API_KEY"] = openai_api_key

# MongoDB connection

MONGO_URI = os.getenv("MAIN_DB_URL")

client = MongoClient(MONGO_URI)

db = client.get_database()

collection = db["internal_products"] # Replace with your collection name

# Initialize Azure OpenAI Embeddings with 'azure_endpoint' instead of 'openai_api_base'

embeddings = AzureOpenAIEmbeddings(

  azure_deployment=deployment_name,

  openai_api_version=openai_api_version,

  openai_api_key=openai_api_key,

  azure_endpoint=azure_endpoint, # Use 'azure_endpoint'

)

# Function to generate embeddings for a query

def generate_embedding(query):

  return embeddings.embed_query(query)

# Function to perform vector search using $vectorSearch operator

def vector_search_query(query_embedding, collection, index_name="vector_index", limit=5):

  pipeline = [

    {

      "$vectorSearch": {

        "index": index_name,

        "path": "embedding", # Replace with the actual field name storing the vector

        "queryVector": query_embedding,

        "numCandidates": 100,

        "limit": limit,

        "type": "knnVector"

      }

    },

    {

      "$project": {

        "_id": 1,

        "brandName": 1, # Replace with the fields you want to return

        "score": {"$meta": "vectorSearchScore"},

      }

    },

  ]

  print("collection.aggregate(pipeline)", collection.aggregate(pipeline))

  return list(collection.aggregate(pipeline))



# Define your query

query = "give me document whose zone is South America"

# Generate embeddings for the query

query_embedding = generate_embedding(query)



# Perform vector search using the generated embeddings

results = vector_search_query(query_embedding, collection)

print("results", results)

# Print results

for doc in results:

  print("+++++++++++++++++++", doc)

print("MongoDBAtlasVectorSearch initialized!")



when i console that time why my result is empty

collection.aggregate(pipeline) <pymongo.synchronous.command_cursor.CommandCursor object at 0x000001C2070B91C0>

results []

MongoDBAtlasVectorSearch initialized!

why this happening?
